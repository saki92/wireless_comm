clear;
clc;

Nt = 2; %no of transmit antennas
K = 2; %no of receivers
Q = 1; %no of antennas per receiver
M = 10; %no of channel realizations
sigma = 1; %noise covariance
SNR = 10; %dB
Pt = 10.^(SNR/10); %total transmit power

Hcap = ( 1/sqrt(2) ) * ( randn(Nt,Q*K) + 1i*randn(Nt,Q*K) );
Htil = zeros(Nt*M,K);
for m = 1:2:M*Nt-1
    Htil(m:m+1,:) = [ ( 1/sqrt(2) ) * ( randn(Nt,Q*K) + 1i*randn(Nt,Q*K) ) ];
end

H = Hcap + Htil
P = ( 1 / sumsqr(abs(Hm')) * Hm' ).';
SVal_bar_n = [];


%% Transmit filter calc
a = 1;
n = 0;
while a == 1
    SVal = [];
    T = zeros(M*Nt, K); G = zeros(M*Nt, K); U = zeros(M*Nt, K); v = zeros(Nt*M,K);
    t = zeros(M*Nt, K); Psi = zeros(M*Nt,K,Nt,Nt); f = zeros(M*Nt,K,Nt);
    for k = 1:K
        for m = 0:M-1
            for i = 1:K
                if i ~= k
                    Ik = abs( Hm(m*Nt+1:(m*Nt+1)+Nt-1,k)' * ...
                    P(m*Nt+1:(m*Nt+1)+Nt-1,i) )^2 + sigma; %Interfearence power
                end
            end
            T(m+1,k) = abs( Hm(m*Nt+1:(m*Nt+1)+Nt-1,k)' * ...
                P(m*Nt+1:(m*Nt+1)+Nt-1,k) )^2; %Average power
            G(m+1,k) = P(m*Nt+1:(m*Nt+1)+Nt-1,k)' *...
                Hm(m*Nt+1:(m*Nt+1)+Nt-1,k) / T(m+1,k); %Equalizer matrix
            U(m+1,k) = inv( T(m+1,k) \ Ik); %MMSE weights
            t(m+1,k) = U(m+1,k) * abs( G(m+1,k) )^2;
            Psi(m+1,k,:,:) = t(m+1,k) * Hm(m*Nt+1:(m*Nt+1)+Nt-1,k) * ...
                Hm(m*Nt+1:(m*Nt+1)+Nt-1,k)';
            f(m+1,k,:) = U(m+1,k) * Hm(m*Nt+1:(m*Nt+1)+Nt-1,k) * G(m+1,k)';
            v(m+1,k) = log2( U(m+1,k) );
        end
    end

    P_opt_all = [];
    for mc = 1:M
        cvx_begin quiet
        variable P_opt(Nt, K) complex;

        expression S;
        for k = 1:K
            p_Psi = 0;
            for i = 1:K
                Psi_bar = reshape(mean(Psi(:,k,:,:),1),Nt,Nt);
                Psi_bar = 0.5 * (Psi_bar + Psi_bar');
                p_Psi = p_Psi + ( P_opt(:,i)' * Psi_bar * P_opt(:, i) );
            end
            temp_f = mean(f(:,k,:),1);
            S = S + p_Psi + ( sigma * mean( t(:, k) ) ) - ( 2 * real(reshape...
                (temp_f(1,1,:),2,1)'*P_opt(:, k))) + mean( U(:, k) )...
                - mean( v(:, k) );
        end

        expression pwr;
        for k = 1:K
            pwr = pwr + sum_square_abs( P_opt(:, k) );
        end

        minimize S;
        subject to
        pwr <= Pt;

        cvx_end
        P_opt_all = [P_opt_all; P_opt]; 
        SVal = [SVal, S];
    end
    SVal_bar = mean(SVal);
    SVal_bar_n = [SVal_bar_n, SVal_bar];
    n = n + 1;
    if ~exist('Sold','var')
        a = 1;
    elseif n > 4 %|| abs(Sold - S) < .000001 %to control while loop
        a = 0;
    end
    
    Sold = S;
    P = P_opt_all;
    %a = 0;
end
plot(1:n, SVal_bar_n,'-b*');